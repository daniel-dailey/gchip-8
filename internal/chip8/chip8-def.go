package chip8

import "gochip8/internal/clog"

const (
	StartAddr         = 0x200
	FontsetStartAddr  = 0x50
	VideoBufferWidth  = 64
	VideoBufferHeight = 32
	MemoryBufferSize  = 4096
)

var fontset = [80]byte{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

type Chip8 struct {
	//memory
	registers [16]byte
	keys      [16]byte
	stack     [16]uint16
	memory    [MemoryBufferSize]byte
	display   [VideoBufferWidth * VideoBufferHeight]uint32
	//counters + codes
	i      uint16
	pc     uint16
	sp     byte
	delay  byte
	sound  byte
	opcode uint16
	//Function tables
	funcTable  map[uint16]func()
	funcTable0 map[uint16]func()
	funcTable8 map[uint16]func()
	funcTableE map[uint16]func()
	funcTableF map[uint16]func()

	//For testing
	cycleTimes []int64
	logger     *clog.Log
	romSize    int
}
